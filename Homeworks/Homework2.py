"""1.   Описать функцию Sign(X) целого типа, возвращающую для вещественного числа X
следующие значения: –1, если X < 0; 0, если X = 0; 1, если X > 0. С помощью
этой функции найти значение выражения Sign(A) + Sign(B) для данных вещественных чисел A и B."""""


def Sign(x: float) -> int:
    if x < 0:
        return -1
    else:
        return 0 if x == 0 else 1

print("Задание 1")
print(Sign(15.) + Sign(-8.))

"""2.   Описать функцию RootCount(A, B, C) целого типа, определяющую количество корней квадратного 
уравнения A·x2 + B·x + C = 0 (A, B, C — вещественные параметры, A ≠ 0). С ее помощью найти 
количество корней для каждого из трех квадратных уравнений с данными коэффициентами. Количество 
корней определять по значению дискриминанта: D = B2 – 4·A·C."""


def RootCount(A: float, B: float, C: float) -> int:
    if A == 0:
        raise ArithmeticError("A не должно быть равно 0")
    D = B ** 2 - 4 * A * C
    if D > 0:
        return 2
    else:
        return 1 if D == 0 else 0

print("Задание 2")
print(RootCount(1, 4, 4))
print(RootCount(1, 3, 2))
print(RootCount(1, 4, 18))

"""3.   Описать функцию CircleS(R) вещественного типа, находящую площадь круга радиуса R (R — вещественное). 
С помощью этой функции найти площади трех кругов с данными радиусами. Площадь круга радиуса R вычисляется 
по формуле S = π·R2. В качестве значения π использовать 3.14."""


def CircleS(R: float) -> float:
    return 3.14 * R ** 2

print("Задание 3")
print(CircleS(1.))
print(CircleS(2.))
print(CircleS(10.))

"""4.   Описать функцию RingS(R1, R2) вещественного типа, находящую площадь кольца, заключенного между двумя 
окружностями с общим центром и радиусами R1 и R2 (R1 и R2 — вещественные, R1 > R2). С ее помощью найти 
площади трех колец, для которых даны внешние и внутренние радиусы. Воспользоваться формулой площади круга 
радиуса R: S = π·R2. В качестве значения π использовать 3.14."""


def RingS(R1: float, R2: float) -> float:
    if R1 <= R2:
        raise ArithmeticError("R1 Должно быть больше R2")
    return CircleS(R1) - CircleS(R2)

print("Задание 4")
print(RingS(2., 1.))
print(RingS(10., 1.))
print(RingS(5., 4.))

"""5.   Описать функцию TriangleP(a, h), находящую периметр равнобедренного треугольника по его основанию a 
и высоте h, проведенной к основанию (a и h — вещественные). С помощью этой функции найти периметры трех 
треугольников, для которых даны основания и высоты. Для нахождения боковой стороны b треугольника 
использовать теорему Пифагора: b2 = (a/2) 2 + h2."""


def TriangleP(a: float, h: float):
    b = ((a / 2) ** 2 + h ** 2) ** 0.5
    return b + b + a

print("Задание 5")
print(TriangleP(2., 1.))
print(TriangleP(10., 1.))
print(TriangleP(5., 2.))

"""6.	Описать функцию SumRange(A, B) целого типа, находящую сумму всех целых чисел от A до B включительно
 (A и B — целые). Если A > B, то функция возвращает 0. С помощью этой функции найти суммы чисел от A до B и 
 от B до C, если даны числа A, B, C."""


def SumRange(a: int, b: int) -> int:
    if a > b:
        return 0
    else:
        return int((a + b) / 2 * (b - a + 1))

print("Задание 6")
print(SumRange(1, 100))
print(SumRange(100, 200))

"""7.	Описать функцию Calc(A, B, Op) вещественного типа, выполняющую над ненулевыми вещественными числами 
A и B одну из арифметических операций и возвращающую ее результат. Вид операции определяется целым 
параметром Op: 1 — вычитание, 2 — умножение, 3 — деление, остальные значения — сложение. С помощью Calc 
выполнить для данных A и B операции, определяемые данными целыми N1, N2, N3."""


def Calc(a, b, op) -> float:
    if op == 1:
        return a - b
    elif op == 2:
        return a * b
    elif op == 3:
        return a / b
    else:
        return a + b

print("Задание 7")
print(Calc(100, 10, 1))
print(Calc(100, 10, 2))
print(Calc(100, 10, 3))

"""8.	Описать функцию Quarter(x, y) целого типа, определяющую номер координатной четверти, в которой 
находится точка с ненулевыми вещественными координатами (x, y). С помощью этой функции найти номера 
координатных четвертей для трех точек с данными ненулевыми координатами."""


def Quarter(x, y) -> int:
    if x > 0:
        if y > 0:
            return 1
        else:
            return 4
    else:
        if y > 0:
            return 2
        else:
            return 3

print("Задание 8")
print(Quarter(1, 1))
print(Quarter(-1, 1))
print(Quarter(-1, -1))

"""9.	Описать функцию Even(K) логического типа, возвращающую True, если целый параметр K является 
четным, и False в противном случае. С ее помощью найти количество четных чисел в наборе из 10 целых чисел."""


def Even(k) -> bool:
    return k % 2 == 0

print("Задание 9")
print(len(list(filter(Even, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))))

"""10.	Описать функцию IsSquare(K) логического типа, возвращающую True, если целый параметр K (> 0) 
является квадратом некоторого целого числа, и False в противном случае. С ее помощью найти количество 
квадратов в наборе из 10 целых положительных чисел."""


def IsSquare(k) -> bool:
    return int(k ** 0.5) ** 2 == k

print("Задание 10")
print(len(list(filter(IsSquare, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))))

"""11.	Описать функцию IsPower5(K) логического типа, возвращающую True, если целый параметр K (> 0) 
является степенью числа 5, и False в противном случае. С ее помощью найти количество степеней числа 5 
в наборе из 10 целых положительных чисел."""


def IsPower5(k) -> bool:
    while k > 1:
        if k % 5 != 0:
            return False
        k //= 5
    return True

print("Задание 11")
print(len(list(filter(IsPower5, [1, 2, 3, 4, 5, 6, 7, 8, 625, 125]))))

"""12.	Описать функцию IsPowerN(K, N) логического типа, возвращающую True, если целый параметр K (> 0) 
является степенью числа N (> 1), и False в противном случае. Дано число N (> 1) и набор из 10 целых 
положительных чисел. С помощью функции IsPowerN найти количество степеней числа N в данном наборе."""


def IsPowerN(k, n) -> bool:
    while k > 1:
        if k % n != 0:
            return False
        k //= n
    return True

print("Задание 12")
print(len(list(filter(lambda x: IsPowerN(x, n=2), [1, 2, 3, 4, 5, 6, 7, 8, 625, 125]))))

"""13.	Описать функцию IsPrime(N) логического типа, возвращающую True, если целый параметр N (> 1) 
является простым числом, и False в противном случае (число, большее 1, называется простым, если оно 
не имеет положительных делителей, кроме 1 и самого себя). Дан набор из 10 целых чисел, больших 1. 
С помощью функции IsPrime найти количество простых чисел в данном наборе."""

def IsPrime(n) -> bool:
    k = 2
    while k*k <= n:
        if n % k == 0:
            return False
        k += 1
    return True

print("Задание 13")
print(len(list(filter(IsPrime, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]))))

"""14.	Описать функцию DigitCount(K) целого типа, находящую количество цифр целого положительного 
числа K. Используя эту функцию, найти количество цифр для каждого из пяти данных 
целых положительных чисел."""

def DigitCount(k) -> int:
    return len(str(k))

print("Задание 14")
print(list(map(DigitCount, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29])))
